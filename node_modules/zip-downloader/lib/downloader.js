'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _jszip = require('jszip');

var _jszip2 = _interopRequireDefault(_jszip);

var _fileSaver = require('file-saver');

var _fileSaver2 = _interopRequireDefault(_fileSaver);

var _fetcher = require('./fetcher');

var _fetcher2 = _interopRequireDefault(_fetcher);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var saveFile = function saveFile(params) {
  return _fileSaver2.default.saveAs(params.content, params.downloadFileName);
};

var saveAsZip = function saveAsZip(assetData, downloadFileName, queuedSaveFile, cb) {
  var zip = new _jszip2.default();
  var folder = zip.folder(downloadFileName);

  for (var i = 0; i < assetData.length; i++) {
    folder.file(assetData[i].asset.name, assetData[i].result, { base64: false });
  }

  zip.generateAsync({ type: "blob" }).then(function (content) {
    queuedSaveFile({
      content: content,
      downloadFileName: downloadFileName + '.zip'
    });
    cb && cb();
  });
};

var downloadAssets = function downloadAssets(assets, _ref) {
  var downloadFileName = _ref.downloadFileName,
      maxZIPSize = _ref.maxZIPSize,
      statusCallback = _ref.statusCallback,
      onComplete = _ref.onComplete;

  var assetCount = assets.length;
  var failedAssetList = [];
  var queuedSaveFile = (0, _util.queue)(saveFile, 1000); //function calls queued to execute once in 1 sec because of lib issue.
  var assetsToSave = [];
  var numberOfDownloadedAssets = 0;
  var downloadedZIPFileCount = 0;
  var numberOfFailedAssets = 0;
  var numberOfLargeUnZippedAssets = 0;
  var downloadedAssetSize = 0;

  var resolvePromise = function resolvePromise() {
    return onComplete({
      numberOfDownloadedAssets: numberOfDownloadedAssets,
      numberOfFailedAssets: numberOfFailedAssets,
      numberOfLargeUnZippedAssets: numberOfLargeUnZippedAssets,
      failedAssetList: failedAssetList,
      numberOfDownloadedZIPFiles: downloadedZIPFileCount > 0 ? ++downloadedZIPFileCount : downloadedZIPFileCount
    });
  };

  var testAndSave = function testAndSave(savedAsset) {
    if (savedAsset) {
      //download success
      var assetSize = savedAsset.result.byteLength;
      if (downloadedAssetSize + assetSize > maxZIPSize) {
        saveAsZip(assetsToSave, (0, _util.getIndexedFileName)(downloadFileName, downloadedZIPFileCount), queuedSaveFile);
        downloadedZIPFileCount++;
        assetsToSave = [savedAsset];
        downloadedAssetSize = assetSize;
      } else {
        assetsToSave.push(savedAsset);
        downloadedAssetSize = downloadedAssetSize + assetSize;
      }
    }

    if (numberOfDownloadedAssets + numberOfFailedAssets === assetCount) {
      //check for asset download completion
      if (assetsToSave.length) {
        saveAsZip(assetsToSave, (0, _util.getIndexedFileName)(downloadFileName, downloadedZIPFileCount), queuedSaveFile, resolvePromise);
      } else {
        resolvePromise();
      }
    }
  };

  var onSuccess = function onSuccess(asset, result) {
    var savedAssetInfo = void 0;
    statusCallback(++numberOfDownloadedAssets);

    if (result.byteLength > maxZIPSize) {
      //downloading separately because of 2gb limit
      ++numberOfLargeUnZippedAssets;
      queuedSaveFile({
        content: new Blob([result]),
        downloadFileName: asset.name
      });
    } else {
      savedAssetInfo = { result: result, asset: asset };
    }

    testAndSave(savedAssetInfo);
  };

  var onFailure = function onFailure(asset) {
    failedAssetList.push(asset);
    ++numberOfFailedAssets;
    testAndSave();
  };

  assets.forEach(function (asset) {
    return (0, _fetcher2.default)(asset.src, onSuccess.bind(null, asset), onFailure.bind(null, asset));
  });
};

var DEFAULT_OPTIONS = {
  downloadFileName: 'zipped_files',
  maxZIPSize: 2000000000, //jszip limit
  downloadBigFiles: true,
  statusCallback: function statusCallback() {},
  onComplete: function onComplete() {}
};

var parseOptions = function parseOptions(options) {
  var maxZIPSize = DEFAULT_OPTIONS.maxZIPSize;
  if (options.maxZIPSize && options.maxZIPSize < DEFAULT_OPTIONS.maxZIPSize) {
    maxZIPSize = options.maxZIPSize;
  }

  return (0, _assign2.default)({}, DEFAULT_OPTIONS, options, { maxZIPSize: maxZIPSize });
};

var parseAssets = function parseAssets(assets) {
  var fileNameCounts = {};

  return assets.reduce(function (acc, _ref2) {
    var src = _ref2.src,
        name = _ref2.name;

    var assetName = name;
    if (src) {
      assetName = (0, _util.getAssetFileName)(name, src);

      var uniqueFileName = assetName.toLowerCase();
      var fileNameCount = fileNameCounts[uniqueFileName] || 0;
      if (fileNameCount) {
        assetName = (0, _util.numeriseFileName)(assetName, fileNameCount);
      }
      fileNameCounts[uniqueFileName] = ++fileNameCount;

      acc.push({
        src: src,
        name: assetName
      });
    }

    return acc;
  }, []);
};

exports.default = function () {
  var assets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var options = arguments[1];

  var opts = parseOptions(options);
  downloadAssets(parseAssets(assets), opts);
};